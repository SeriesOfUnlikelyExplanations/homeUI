service: rental
provider:
  name: aws
  runtime: nodejs12.x
  cfnRole: arn:aws:iam::718523126320:role/serverless
  stage: prod
  environment:
    locationIQKey: ${ssm:/rental-manager/locationIQKey~true}

functions:
  public:
    handler: handler.public
    events:
      - http: ANY /
      - http: ANY /public/{proxy+}
  private:
    handler: handler.private
    events:
      - http:
          path: /home
          method: ANY
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: rentalUsers
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: rental
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]

plugins:
  - serverless-offline
